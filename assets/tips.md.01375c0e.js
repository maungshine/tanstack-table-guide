import{_ as e,c as t,o as a,a as s}from"./app.c388e5de.js";const m=JSON.parse('{"title":"\u{1F4A1} Tips & Best Practices (React)","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. Keep Your Columns and Data Separate","slug":"_1-keep-your-columns-and-data-separate","link":"#_1-keep-your-columns-and-data-separate","children":[]},{"level":2,"title":"2. Control State Externally When Needed","slug":"_2-control-state-externally-when-needed","link":"#_2-control-state-externally-when-needed","children":[]},{"level":2,"title":"3. Use Headless Design to Your Advantage","slug":"_3-use-headless-design-to-your-advantage","link":"#_3-use-headless-design-to-your-advantage","children":[]},{"level":2,"title":"4. Utilize Plugin System","slug":"_4-utilize-plugin-system","link":"#_4-utilize-plugin-system","children":[]},{"level":2,"title":"5. Optimize Performance","slug":"_5-optimize-performance","link":"#_5-optimize-performance","children":[]},{"level":2,"title":"6. Test Your Table Components","slug":"_6-test-your-table-components","link":"#_6-test-your-table-components","children":[]},{"level":2,"title":"7. Customize Cell Rendering","slug":"_7-customize-cell-rendering","link":"#_7-customize-cell-rendering","children":[]},{"level":2,"title":"8. Accessibility Matters","slug":"_8-accessibility-matters","link":"#_8-accessibility-matters","children":[]},{"level":2,"title":"9. Follow Semantic HTML Table Structure","slug":"_9-follow-semantic-html-table-structure","link":"#_9-follow-semantic-html-table-structure","children":[]}],"relativePath":"tips.md"}'),n={name:"tips.md"},l=s(`<h1 id="\u{1F4A1}-tips-best-practices-react" tabindex="-1">\u{1F4A1} Tips &amp; Best Practices (React) <a class="header-anchor" href="#\u{1F4A1}-tips-best-practices-react" aria-hidden="true">#</a></h1><p>To get the most out of TanStack Table and build maintainable, efficient tables, keep these best practices in mind.</p><h2 id="_1-keep-your-columns-and-data-separate" tabindex="-1">1. Keep Your Columns and Data Separate <a class="header-anchor" href="#_1-keep-your-columns-and-data-separate" aria-hidden="true">#</a></h2><p>Define your columns and data independently. This makes your table flexible and easier to maintain.</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> columns </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">useMemo</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">useMemo</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Using <code>useMemo</code> avoids unnecessary re-renders and performance issues.</p><h2 id="_2-control-state-externally-when-needed" tabindex="-1">2. Control State Externally When Needed <a class="header-anchor" href="#_2-control-state-externally-when-needed" aria-hidden="true">#</a></h2><p>You can control sorting, filtering, pagination, and selection state outside the table component to sync with URL params or backend.</p><h2 id="_3-use-headless-design-to-your-advantage" tabindex="-1">3. Use Headless Design to Your Advantage <a class="header-anchor" href="#_3-use-headless-design-to-your-advantage" aria-hidden="true">#</a></h2><p>TanStack Table is headless \u2014 you build the UI yourself. Use this flexibility to integrate with your design system or UI framework.</p><h2 id="_4-utilize-plugin-system" tabindex="-1">4. Utilize Plugin System <a class="header-anchor" href="#_4-utilize-plugin-system" aria-hidden="true">#</a></h2><p>Take advantage of built-in plugins like sorting, filtering, pagination, and row selection to extend functionality without reinventing the wheel.</p><h2 id="_5-optimize-performance" tabindex="-1">5. Optimize Performance <a class="header-anchor" href="#_5-optimize-performance" aria-hidden="true">#</a></h2><ul><li>Use <code>useMemo</code> for columns and data.</li><li>Use <code>getCoreRowModel</code> and other row model getters properly.</li><li>Avoid heavy computations inside render methods.</li></ul><h2 id="_6-test-your-table-components" tabindex="-1">6. Test Your Table Components <a class="header-anchor" href="#_6-test-your-table-components" aria-hidden="true">#</a></h2><p>Since you control rendering, you can write unit tests and snapshot tests for your table UI easily.</p><h2 id="_7-customize-cell-rendering" tabindex="-1">7. Customize Cell Rendering <a class="header-anchor" href="#_7-customize-cell-rendering" aria-hidden="true">#</a></h2><p>Use <code>cell.renderCell()</code> or your own custom cell renderers for complex cell content.</p><h2 id="_8-accessibility-matters" tabindex="-1">8. Accessibility Matters <a class="header-anchor" href="#_8-accessibility-matters" aria-hidden="true">#</a></h2><p>Make sure to add proper roles, aria-attributes, and keyboard support to your tables.</p><h2 id="_9-follow-semantic-html-table-structure" tabindex="-1">9. Follow Semantic HTML Table Structure <a class="header-anchor" href="#_9-follow-semantic-html-table-structure" aria-hidden="true">#</a></h2><p>Use <code>&lt;table&gt;</code>, <code>&lt;thead&gt;</code>, <code>&lt;tbody&gt;</code>, <code>&lt;tr&gt;</code>, <code>&lt;th&gt;</code>, and <code>&lt;td&gt;</code> properly for better accessibility and SEO.</p><hr><p>Happy coding! \u{1F680}</p><p>\u27A1\uFE0F This is the last page of the guide.</p><hr><p>For more advanced topics, examples, and API references, visit the official TanStack Table documentation at <a href="https://tanstack.com/table" target="_blank" rel="noreferrer">https://tanstack.com/table</a>.</p>`,27),o=[l];function r(i,c,d,p,u,h){return a(),t("div",null,o)}const g=e(n,[["render",r]]);export{m as __pageData,g as default};
